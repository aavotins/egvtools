% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tiled_buffers.R
\name{tiled_buffers}
\alias{tiled_buffers}
\title{Create buffered tiles from point layers}
\source{
Zenodo grids/points example: https://zenodo.org/records/14277114
}
\usage{
tiled_buffers(
  in_dir = "./Templates/TemplateGridPoints",
  out_dir = "./Templates/TemplateGridPoints/lapas",
  buffer_mode = "dense",
  radii_dense = c(500, 1250, 3000, 10000),
  mapping_sparse = list(pts100_sauzeme.parquet = c(500, 1250), pts300_sauzeme.parquet =
    3000, pts1000_sauzeme.parquet = 10000),
  points_path = NULL,
  buffer_radius = NULL,
  radius_field = NULL,
  split_field = "tks50km",
  n_workers = max(1L, parallel::detectCores()),
  os_type = NULL,
  future_max_mem_gb = 4,
  overwrite = FALSE,
  quiet = FALSE
)
}
\arguments{
\item{in_dir}{Character. Directory containing input points parquet files
(default "./Templates/TemplateGridPoints"). Used in "dense" and "sparse" modes.}

\item{out_dir}{Character. Output directory for buffered tiles
(default "./Templates/TemplateGridPoints/lapas").}

\item{buffer_mode}{Character. One of "dense", "sparse", "specified". Default "dense".}

\item{radii_dense}{Numeric vector of radii (m) used when \code{buffer_mode = "dense"}.
Default c(500, 1250, 3000, 10000).}

\item{mapping_sparse}{Named list \strong{or} data.frame describing file to radii for
\code{buffer_mode = "sparse"}. Default:
\code{list("pts100_sauzeme.parquet" = c(500, 1250), "pts300_sauzeme.parquet" = 3000, "pts1000_sauzeme.parquet" = 10000)}.
If a data.frame is supplied, it must have columns \code{file} and \code{radius}.}

\item{points_path}{Character. Path to a single parquet file for
\code{buffer_mode = "specified"}.}

\item{buffer_radius}{Numeric vector. Used in "specified" when you want fixed radii.
Ignored if \code{radius_field} is provided.}

\item{radius_field}{Character or NULL. Column name in \code{points_path} that provides
per-feature radii (meters) for "specified". If given, \code{buffer_radius} is ignored.}

\item{split_field}{Character. Field in the point data that defines tiles. Default "tks50km".}

\item{n_workers}{Integer. Parallel workers. Default \code{max(1L, parallel::detectCores())}.}

\item{os_type}{Optional character to force backend plan:
"windows", "mac", "darwin", "linux", "slurm". Default NULL becomes auto-detect.}

\item{future_max_mem_gb}{Numeric. Max size of exported globals per worker (GiB).
Sets \code{options(future.globals.maxSize = future_max_mem_gb * 1024^3)}. Default 4.}

\item{overwrite}{Logical. Overwrite existing outputs? Default FALSE.}

\item{quiet}{Logical. Suppress messages? Default FALSE.}
}
\value{
Invisibly returns a data.frame with columns:
\code{input}, \code{tileid}, \code{mode}, \code{radius_m} (NA if \code{radius_field} is used),
\code{radius_field}, \code{out_file}, \code{wrote}.
}
\description{
Buffers point parquet files and writes \strong{per-tile} outputs named:
\itemize{
\item Fixed radius: \verb{<base>_r<radius>_<tileid>.parquet}
\item Per-feature radii (\code{radius_field}): \verb{<base>_varradius_<tileid>.parquet}
}

Where:
\itemize{
\item \strong{base} = prefix of input filename before the first underscore (e.g., "pts100" from \code{pts100_sauzeme.parquet})
\item \strong{tileid} = unique value of \code{split_field} (default "tks50km") inside the input file
}

The \code{buffer_mode} determines how radii are assigned:
\itemize{
\item \strong{"dense"}: Buffers the best-matching \code{pts100*.parquet} (prefers \code{pts100_sauzeme.parquet})
for each tile by \code{radii_dense} (default: 500, 1250, 3000, 10000 m).
\item \strong{"sparse"}: Uses a file to radius mapping. Default mapping:
\itemize{
\item \code{pts100_sauzeme.parquet} to c(500, 1250)
\item \code{pts300_sauzeme.parquet} to 3000
\item \code{pts1000_sauzeme.parquet} to 10000
You can override this via \code{mapping_sparse} (named list or data.frame with columns \code{file}, \code{radius}).
}
\item \strong{"specified"}: You provide \code{points_path} and either
\code{buffer_radius} (uniform, one or more fixed radii) \strong{or} \code{radius_field}
(numeric column with per-feature radii in meters). Outputs are still split by \code{split_field}.
}
}
\details{
\itemize{
\item Uses \pkg{sfarrow} for parquet I/O and \pkg{sf} for buffering.
\item Jobs are created \strong{per tile} (unique \code{split_field} value) and (when applicable) per radius.
\item Workers open data from file paths (keeps RAM low).
\item Files are written atomically (temp file then move).
\item \strong{Safety}: jobs are de-duplicated by content \strong{and} by predicted output path, so concurrent
workers never write to the same file.
}
}
\examples{
\dontrun{
tiled_buffers(buffer_mode = "sparse", split_field = "tks50km")
}

}
\seealso{
\code{\link[=tile_vector_grid]{tile_vector_grid()}}
}
