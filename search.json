[{"path":[]},{"path":"https://aavotins.github.io/egvtools/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://aavotins.github.io/egvtools/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://aavotins.github.io/egvtools/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://aavotins.github.io/egvtools/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://aavotins.github.io/egvtools/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement andris.avotins@lu.lv. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://aavotins.github.io/egvtools/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://aavotins.github.io/egvtools/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://aavotins.github.io/egvtools/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://aavotins.github.io/egvtools/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://aavotins.github.io/egvtools/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://aavotins.github.io/egvtools/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://aavotins.github.io/egvtools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Andris Avotiņš Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://aavotins.github.io/egvtools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andris Avotiņš. Author, maintainer.","code":""},{"path":"https://aavotins.github.io/egvtools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Avotiņš (2025). egvtools: High‑resolution Ecogeographical Variables Toolkit. R package version 0.0.0.9000, https://aavotins.github.io/egvtools/.","code":"@Manual{,   title = {egvtools: High‑resolution Ecogeographical Variables Toolkit},   author = {Andris Avotiņš},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://aavotins.github.io/egvtools/}, }"},{"path":"https://aavotins.github.io/egvtools/index.html","id":"egvtools-high-resolution-ecogeographical-variable-workflows","dir":"","previous_headings":"","what":"High‑resolution Ecogeographical Variables Toolkit","title":"High‑resolution Ecogeographical Variables Toolkit","text":"egvtools provides coherent set wrappers utilities make large-scale EGV creation reproducible pleasant real datasets. package leans robust building blocks—terra, sf, sfarrow, exactextractr, whitebox—standardizes /O, naming conventions, multi-scale zonal statistics pipelines repeatable across machines projects. package developed simply work project “HiQBioDiv: High-resolution quantification biodiversity conservation management” funded Latvian Council Science (Ref. . VPP-VARAM-DABA-2024/1-0002) ease reproduction work. Five functions strictly replication, others useful wider audience (see documentation articles). Athough georeferenced data can considered geodata, material use following terms order listed workflows: raw geodata - considered raw data obtained harmonised description environment. may include tables coordinates, raster vector data. can anything can used create ecogeographical variables, without slight processing. geodata product - processed raw geodata undegone heavy modifications, e.g. spatial overlays combinations different sets raw geodata, used input data. document, geodata products categorical raster layers match CRS pixel locations input data. split categories, become input data. processing step creating geodata products necessary decisions order spatial overlays important. example, high-resolution pixel, can water forest, edge water forest need calculated. input data input layers - -high resolution (multiple times higher used ecogeographical variables) raster data direct input creation ecogeographical variables. creation layers particularly useful alongside geodata products, dealing border misalignment decisions regarding order spatial o verlays, well simple geoprocessing, much faster raster data. ecogeographical variables (EGVs) - final product workflow describing environment statistical analysis (e.g. species distribution modelling). suitable also publishing due standadisation values. words, standardised landscape ecological variables form high-resolution raster layers.","code":""},{"path":"https://aavotins.github.io/egvtools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"High‑resolution Ecogeographical Variables Toolkit","text":"can install development version egvtools GitHub :","code":"# install.packages(\"pak\") pak::pak(\"aavotins/egvtools\")"},{"path":"https://aavotins.github.io/egvtools/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"High‑resolution Ecogeographical Variables Toolkit","text":"Functions package can devided two parts extra intermediate wrapper: helper functions prepare analysis templates reproduction: download_raster_templates() — fetch template rasters (Zenodo repository); download_vector_templates() — fetch template vector grids/points (Zenodo repository); tile_vector_grid() — tile template (vector) grid chunked processing; tiled_buffers() — precompute buffered tiles multiple radii; radius_function() — multi-scale zonal statistics (dense/sparse). Currently hard coded filenames; intermediate wrapper around terra::ifel(): create_backgrounds() — build consistent background rasters, guarding spatial cover, resolution, coordinate reference system, exact pixel matching, etc.; core analysis functions - small workflows, easily generalizable areas usecases. Every function guards spatial cover, resolution, coordinate reference system, exact pixel matching, etc.: polygon2input() — rasterize polygons ultra-high-resolution template, handle background/mask; input2egv() — normalize/align ultra-high-resolution inputs broader-resolution EGV output rasters guards template; downscale2egv() — downscale coarse rasters template grid optionally smooth IDW; distance2egv() — distances features inputs, summarised EGV resolution optional gap filling edges; landscape_function() — landscape-level per-zone metrics, tiled. package use various geodata. Vector data need polygonised polygon2input(). Multiple outputs function can combined creating EGVs. use term input raster layers higher resolution (exact multiple) EGV used species distribution analysis. layers geodata harmonisation standartisation much faster memory-friendly approach. Every function ending *egv() landscape_*() radius_*() functions create standartised harmonised EGVs. Functions ending *egv() landscape_*() function operate EGV cell resolution. radius_function() creates output matching EGV template cell values representing aggregated information larger scales (specified radius around every EGV-cells center mode=“dense” spatially sparse aggregation mode=“sparse”).","code":""},{"path":"https://aavotins.github.io/egvtools/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"High‑resolution Ecogeographical Variables Toolkit","text":"Please note egvtools project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/create_backgrounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Create constant-background rasters from a directory of GeoTIFFs — create_backgrounds","title":"Create constant-background rasters from a directory of GeoTIFFs — create_backgrounds","text":"every raster in_dir, creates new raster non-NA cells set background_value NA cells preserved. Outputs go out_dir (created needed). Files named prefix (default nulls_ background_value == 0, otherwise bg[background_value]_) followed original name, e.g. bg10_my.tif. Uses LZW compression atomic writes. Large rasters can stream disk terra_todisk=TRUE.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/create_backgrounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create constant-background rasters from a directory of GeoTIFFs — create_backgrounds","text":"","code":"create_backgrounds(   in_dir,   out_dir = NULL,   background_value = 0,   pattern = NULL,   recursive = FALSE,   out_prefix = NULL,   NAflag = NULL,   gdal_opts = c(\"COMPRESS=LZW\", \"TILED=YES\", \"BIGTIFF=IF_SAFER\", \"NUM_THREADS=ALL_CPUS\",     \"BLOCKXSIZE=256\", \"BLOCKYSIZE=256\"),   write_datatype = NULL,   terra_memfrac = 0.7,   terra_tempdir = tempdir(),   terra_todisk = FALSE,   force_gc = FALSE,   overwrite = FALSE,   quiet = FALSE )"},{"path":"https://aavotins.github.io/egvtools/reference/create_backgrounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create constant-background rasters from a directory of GeoTIFFs — create_backgrounds","text":"in_dir Directory containing input rasters. out_dir Directory outputs. NULL, defaults file.path(in_dir,\"backgrounds\"). background_value Numeric value assign non-NA pixels. Default 0. pattern Optional regex filter filenames (applied extension filter). recursive Logical; search subdirectories in_dir. Default FALSE. out_prefix Optional filename prefix. NULL, defaults : \"nulls_\" background_value == 0, otherwise \"bg[background_value]_\" (e.g., \"bg10_\", \"bg0.5_\"). NAflag Optional NA flag writing (passed GDAL). Default NULL (auto). gdal_opts Character vector GDAL creation options (merged tuned defaults). Default c(\"COMPRESS=LZW\",\"TILED=YES\",\"BIGTIFF=IF_SAFER\",\"NUM_THREADS=ALL_CPUS\",\"BLOCKXSIZE=256\",\"BLOCKYSIZE=256\"). write_datatype Optional terra datatype writing (e.g., \"INT2S\", \"FLT4S\"). Default NULL (auto described ). terra_memfrac terraOptions(memfrac=...). Default 0.7. terra_tempdir Temp dir terra operations. Default tempdir(). terra_todisk Logical NA. TRUE, prefer -disk processing ifel step. Default FALSE. force_gc Logical; call gc() checkpoints. Default FALSE. overwrite Overwrite existing outputs? Default FALSE. quiet Suppress progress prints (cat())? Default FALSE.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/create_backgrounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create constant-background rasters from a directory of GeoTIFFs — create_backgrounds","text":"Invisibly, data.frame columns: in_file, out_file, n_cells, elapsed_sec.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/create_backgrounds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create constant-background rasters from a directory of GeoTIFFs — create_backgrounds","text":"Reads input terra::rast(). Applies fast element-wise replacement terra::ifel(!.na(x), background_value, NA). Writes LZW compression temporary ._tmp.tif, atomically renames final file. set write_datatype/NAflag, function picks sensible defaults: background_value integer within [-32768, 32767], INT2S + NAflag=-32768. Otherwise FLT4S + float NAflag (-3.4028235e38). .tif / .tiff files processed (optionally refine pattern).","code":""},{"path":"https://aavotins.github.io/egvtools/reference/create_backgrounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create constant-background rasters from a directory of GeoTIFFs — create_backgrounds","text":"","code":"if (FALSE) { # \\dontrun{ # Classic \"nulls_\" backgrounds (fill 0) create_backgrounds(   in_dir = \"./Templates/TemplateRasters\",   out_dir = \"./Outputs/Nulls\",   background_value = 0,   overwrite = TRUE,   terra_todisk = TRUE )  # Fill non-NA with 10, prefix becomes \"bg10_\" create_backgrounds(   in_dir = \"./Templates/TemplateRasters\",   out_dir = \"./Outputs/BG10\",   background_value = 10,   overwrite = TRUE ) } # }"},{"path":"https://aavotins.github.io/egvtools/reference/distance2egv.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance-to-class on the EGV grid — distance2egv","title":"Distance-to-class on the EGV grid — distance2egv","text":"Computes Euclidean distance (map units) cells matching set class values input raster cells EGV template grid, writes Float32 GeoTIFF aligned template. Designed work rasters produced polygon2input().","code":""},{"path":"https://aavotins.github.io/egvtools/reference/distance2egv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance-to-class on the EGV grid — distance2egv","text":"","code":"distance2egv(   input,   template_egv,   values_as_one = NULL,   project_to_template_input = FALSE,   template_input = NULL,   use_whitebox = TRUE,   fill_gaps = FALSE,   idw_weight = 2,   filter_size = NULL,   outlocation = \"./Rastri_100m/RAW/\",   outfilename,   layername,   check_na = FALSE,   plot_result = FALSE,   plot_gaps = FALSE,   NAflag = NULL,   gdal_opts = c(\"COMPRESS=LZW\", \"TILED=YES\", \"BIGTIFF=IF_SAFER\", \"NUM_THREADS=ALL_CPUS\",     \"BLOCKXSIZE=256\", \"BLOCKYSIZE=256\"),   write_datatype = NULL,   terra_memfrac = 0.7,   terra_tempdir = tempdir(),   terra_todisk = FALSE,   force_gc = FALSE,   quiet = FALSE )"},{"path":"https://aavotins.github.io/egvtools/reference/distance2egv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance-to-class on the EGV grid — distance2egv","text":"input terra::SpatRaster file path. Raster prepared polygon2input(). template_egv terra::SpatRaster path. Target EGV template (e.g., 100 m). values_as_one NULL, numeric vector, /range strings bracket notation (see Details). NULL, non-NA cells sources. project_to_template_input Logical. TRUE, reproject input template_input start. Default FALSE. template_input project_to_template_input=TRUE, 10 m template used define target CRS/grid initial reprojection. use_whitebox Logical; use Whitebox distance (default TRUE), otherwise terra::distance(). fill_gaps Logical. TRUE, fill remaining gaps template grid using Whitebox wbt_fill_missing_data(). Default FALSE. idw_weight IDW power Whitebox fill. Default 2. filter_size Optional odd integer window Whitebox. NULL, auto: 2 * max_gap_width_cells, minimum 3. outlocation Output directory. Default \"./Rastri_100m/RAW/\". outfilename Output filename (e.g., \"dist_class_100m.tif\"). Required. layername Output band name. Required. check_na Logical. TRUE, report internal NA count template footprint. Default FALSE. plot_result Logical; plot final result. plot_gaps Logical; plot gap map (TRUE = gap). TRUE, side--side. NAflag Optional NA flag writing. Default NULL (omitted Float32). gdal_opts GDAL creation options (merged tuned defaults). Default c(\"COMPRESS=LZW\",\"TILED=YES\",\"BIGTIFF=IF_SAFER\",\"NUM_THREADS=ALL_CPUS\",\"BLOCKXSIZE=256\",\"BLOCKYSIZE=256\"). write_datatype Terra datatype writing. Default NULL coded \"FLT4S\". terra_memfrac terraOptions(memfrac=...). Default 0.7. terra_tempdir Temp dir terra ops. Default tempdir(). terra_todisk Logical NA. TRUE, prefer -disk heavy steps. Default FALSE. force_gc Logical; call gc() checkpoints. Default FALSE. quiet Suppress console prints. Default FALSE.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/distance2egv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance-to-class on the EGV grid — distance2egv","text":"Invisibly, list : path (output file), n_sources (number source cells input grid), n_na_final (internal NA count template footprint), min_dist, max_dist, elapsed_sec.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/distance2egv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distance-to-class on the EGV grid — distance2egv","text":"Preparation & CRS: Prepare inputs function polygon2input() templates https://zenodo.org/records/14497070 (download via function download_raster_templates()). function automatically reproject 100 m template. warns CRSs differ. rare cases, set project_to_template_input = TRUE provide template_input (10 m) reproject input start. Distance computed (possibly reprojected) inputs map units. Selecting class values: values_as_one accepts -length vector combining: numeric values (e.g., 500, c(610,620,630)), /range strings interval notation inclusive/exclusive bounds: \"[400,600]\", \"(400,600)\", \"[400,600)\", \"(400,600]\". Example: c(\"[600,700)\", \"500\"). values_as_one NULL, non-NA cells considered sources. Distance engine: Set use_whitebox = TRUE (default) compute distance whitebox::wbt_euclidean_distance(); otherwise terra::distance() used. Auto alignment choice: input distance grid 100 m template -CRS, bounding boxes match, template resolution integer multiple input resolution (e.g., 10 m 100 m), function uses terra::aggregate(..., fun=mean) (fast), followed light resample(..., \"near\") lock onto template grid. Otherwise, falls back terra::resample(..., method=\"mean\"). Masking: single mask template_egv applied alignment plotting/saving. Gap filling: fill_gaps = TRUE, gaps (cells output NA template ) filled via whitebox::wbt_fill_missing_data() IDW weight idw_weight. filter_size NULL, function uses 2 * max_gap_width_cells, minimum 3 (max clamp). Whitebox temporaries written COMPRESS=NONE speed; final GeoTIFF uses gdal_opts. Workflow Load input template_egv; optionally reproject input project_to_template_input=TRUE (using template_input). Build seeds raster input grid: 1 value matches values_as_one (non-NA values_as_one=NULL), NA elsewhere. Compute distance input grid via Whitebox (wbt_euclidean_distance) terra::distance() depending use_whitebox. Align distance raster template: perfectly nested (CRS, matching extent, integer resolution ratio), aggregate(mean) resample(\"near\"). Else CRS nested, resample(method=\"mean\"). Else, project(..., method=\"bilinear\"). Apply single final mask template_egv. Optionally fill gaps Whitebox (fill_gaps=TRUE) template grid. Optionally plot result /gap map (side--side requested). Write atomically GeoTIFF LZW compression tuned GDAL options. Restore terraOptions() sink state exit (prevents stuck sinks). Console safety: uses cat() progress snapshots/restores sink state exit console remain \"sunk\" interrupts.","code":""},{"path":[]},{"path":"https://aavotins.github.io/egvtools/reference/distance2egv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance-to-class on the EGV grid — distance2egv","text":"","code":"if (FALSE) { # \\dontrun{ # Distance from classes 1 and [10,20) using Whitebox, with side-by-side plots distance2egv(   input         = \"./TestejuPakotni_early/Forests_StandAge_bg0_b.tif\",   template_egv  = \"./Templates/TemplateRasters/LV100m_10km.tif\",   values_as_one = c(1, \"[10,20)\"),   outlocation   = \"./Rastri_100m/RAW/\",   outfilename   = \"dist_age_100m.tif\",   layername     = \"dist_age\",   use_whitebox  = TRUE,   plot_result   = TRUE,   plot_gaps     = TRUE,   terra_todisk  = TRUE )  # Same with terra::distance() and gap filling distance2egv(   input         = \"./Masks/roads_mask_10m.tif\",   template_egv  = \"./Templates/TemplateRasters/LV100m_10km.tif\",   values_as_one = NULL,  # non-NA are sources   use_whitebox  = FALSE,   fill_gaps     = TRUE,   idw_weight    = 2,   outlocation   = \"./Rastri_100m/RAW/\",   outfilename   = \"dist_roads_100m.tif\",   layername     = \"dist_roads\",   terra_todisk  = TRUE ) } # }"},{"path":"https://aavotins.github.io/egvtools/reference/download_raster_templates.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and unpack raster templates — download_raster_templates","title":"Download and unpack raster templates — download_raster_templates","text":"Downloads ZIP Zenodo (user URL), unpacks destination directory, removes archive successful extraction. Writes tempfile first moves final destination atomicity.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/download_raster_templates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and unpack raster templates — download_raster_templates","text":"","code":"download_raster_templates(   url = \"https://zenodo.org/api/records/14497070/files-archive\",   out_dir = \"./Templates/TemplateRasters\",   overwrite = FALSE,   quiet = FALSE )"},{"path":"https://aavotins.github.io/egvtools/reference/download_raster_templates.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Download and unpack raster templates — download_raster_templates","text":"Zenodo: https://doi.org/10.5281/zenodo.14497070","code":""},{"path":"https://aavotins.github.io/egvtools/reference/download_raster_templates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and unpack raster templates — download_raster_templates","text":"url Character. Archive URL download. Default: Zenodo (EGV raster templates) v2.0.0: \"https://zenodo.org/api/records/14497070/files-archive\". out_dir Character. Destination directory unzipped rasters. Default: \"./Templates/TemplateRasters\". overwrite Logical. Re-download overwrite existing files/dirs? Default: FALSE. quiet Logical. Suppress progress messages. Default: FALSE.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/download_raster_templates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and unpack raster templates — download_raster_templates","text":"Invisibly returns named list out_dir, files_written.","code":""},{"path":[]},{"path":"https://aavotins.github.io/egvtools/reference/download_raster_templates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download and unpack raster templates — download_raster_templates","text":"","code":"if (FALSE) { # \\dontrun{ download_raster_templates() } # }"},{"path":"https://aavotins.github.io/egvtools/reference/download_vector_templates.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and unpack vector templates (points/grids/gpkg) — download_vector_templates","title":"Download and unpack vector templates (points/grids/gpkg) — download_vector_templates","text":"Downloads vector templates archive (default Zenodo) places files : Parquet grids grid_dir Parquet points points_dir GPKG gpkg_dir function auto-classifies files filename patterns: \"tikls*.parquet\" (grids), \"pts*.parquet\" (points), \"vector_grids.gpkg\" (GPKG).","code":""},{"path":"https://aavotins.github.io/egvtools/reference/download_vector_templates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and unpack vector templates (points/grids/gpkg) — download_vector_templates","text":"","code":"download_vector_templates(   url = \"https://zenodo.org/api/records/14277114/files-archive\",   grid_dir = \"./Templates/TemplateGrids\",   points_dir = \"./Templates/TemplateGridPoints\",   gpkg_dir = \"./Templates\",   overwrite = FALSE,   quiet = FALSE )"},{"path":"https://aavotins.github.io/egvtools/reference/download_vector_templates.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Download and unpack vector templates (points/grids/gpkg) — download_vector_templates","text":"Zenodo: https://zenodo.org/records/14277114","code":""},{"path":"https://aavotins.github.io/egvtools/reference/download_vector_templates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and unpack vector templates (points/grids/gpkg) — download_vector_templates","text":"url Character. Default: \"https://zenodo.org/api/records/14277114/files-archive\" grid_dir Character. Default \"./Templates/TemplateGrids\" points_dir Character. Default \"./Templates/TemplateGridPoints\" gpkg_dir Character. Default \"./Templates\" overwrite Logical. Overwrite existing files? Default FALSE. quiet Logical. Suppress progress messages? Default FALSE.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/download_vector_templates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and unpack vector templates (points/grids/gpkg) — download_vector_templates","text":"Invisibly returns list three dirs.","code":""},{"path":[]},{"path":"https://aavotins.github.io/egvtools/reference/download_vector_templates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download and unpack vector templates (points/grids/gpkg) — download_vector_templates","text":"","code":"if (FALSE) { # \\dontrun{ download_vector_templates() } # }"},{"path":"https://aavotins.github.io/egvtools/reference/downscale2egv.html","id":null,"dir":"Reference","previous_headings":"","what":"Downscale & Align a Raster to a Template, with optional gap fill & IDW smoothing — downscale2egv","title":"Downscale & Align a Raster to a Template, with optional gap fill & IDW smoothing — downscale2egv","text":"Aligns source raster template grid (CRS, resolution, extent), masks template footprint, optionally: (1) fills NoData gaps using WhiteboxTools' IDW-based fill_missing_data, (2) applies IDW smoothing reduce blockiness low-resolution inputs. Mass preservation: IDW smoothing (simple smoothers) mass-preserving. conservation totals/means matters (globally zones), post-smoothing rescaling recommended (see Details). interpolation_method = \"auto\", integer/factor inputs use \"near\"; continuous inputs use \"bilinear\".","code":""},{"path":"https://aavotins.github.io/egvtools/reference/downscale2egv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downscale & Align a Raster to a Template, with optional gap fill & IDW smoothing — downscale2egv","text":"","code":"downscale2egv(   template_path,   grid_path,   rawfile_path,   out_path,   file_name,   layer_name,   interpolation_method = \"auto\",   buffer_m = 10000,   check_na = FALSE,   fill_gaps = TRUE,   idw_weight = 2,   filter_size_cells = \"auto\",   plot_gaps = FALSE,   plot_result = FALSE,   smooth = FALSE,   smooth_radius_km = 10,   smooth_agg_factor = 10,   smooth_power = 0.5,   smooth_epsilon = 0,   smooth_nmax = 50,   smooth_force = FALSE,   gdal_opts = c(\"COMPRESS=LZW\", \"TILED=YES\", \"BIGTIFF=IF_SAFER\"),   write_datatype = NULL,   NAflag = NULL,   terra_memfrac = 0.7,   terra_tempdir = tempdir(),   terra_todisk = TRUE,   force_gc = FALSE,   return_visible = FALSE,   quiet = FALSE )"},{"path":"https://aavotins.github.io/egvtools/reference/downscale2egv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downscale & Align a Raster to a Template, with optional gap fill & IDW smoothing — downscale2egv","text":"template_path Character path template GeoTIFF terra::SpatRaster. grid_path Character path GeoParquet grid sf object (used bbox). rawfile_path Character path input raster SpatRaster. out_path Character. Directory output GeoTIFF (created missing). file_name Character. Output file name (e.g., \"result.tif\"). layer_name Character. Band name set output. interpolation_method \"auto\" (default), \"bilinear\", \"near\", \"cubicspline\", \"cubic\". buffer_m Numeric. Buffer distance (meters) applied grid bbox cropping. Default 10000. check_na Logical. TRUE, report NA gap count (inside template). Default FALSE. fill_gaps Logical. TRUE, fill NA gaps via Whitebox. Default TRUE. idw_weight Numeric. IDW power used Whitebox gap filling. Default 2. filter_size_cells Integer \"auto\". Window size (cells) gap filling. Default \"auto\". plot_gaps, plot_result Logical flags diagnostics/plots (side--side ). smooth Logical. Enable IDW smoothing. Default FALSE. smooth_radius_km Numeric. IDW smoothing radius (km). Default 10. smooth_agg_factor Integer. Aggregate factor point creation. Default 10. smooth_power Numeric. IDW power. Default 0.5. smooth_epsilon Numeric. Small smoothing term (supported terra). Default 0. smooth_nmax Integer. Max neighbors (supported terra). Default 50. smooth_force Logical. Allow smoothing integer/factor rasters (recommended). Default FALSE. gdal_opts Character vector. GDAL creation options; merged tuned defaults: c(\"COMPRESS=LZW\",\"TILED=YES\",\"BIGTIFF=IF_SAFER\",\"NUM_THREADS=ALL_CPUS\",\"BLOCKXSIZE=256\",\"BLOCKYSIZE=256\"). write_datatype Character NULL. Optional terra datatype (e.g., \"FLT4S\"). NAflag Numeric/integer NoData value write; NULL omit (default). terra_memfrac terraOptions(memfrac=...). Default 0.7. terra_tempdir Temp dir terra operations. Default tempdir(). terra_todisk Logical NA. TRUE, prefer -disk processing heavy ops. Default TRUE. force_gc Logical; call gc() checkpoints. Default FALSE. return_visible Logical. TRUE, return summary visibly; otherwise invisibly. Default FALSE. quiet Suppress progress prints (cat())? Default FALSE.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/downscale2egv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downscale & Align a Raster to a Template, with optional gap fill & IDW smoothing — downscale2egv","text":"data.frame columns: output, gap_count, max_gap_distance, filter_size_cells, smoothed, smoothing_radius_used, elapsed_sec.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/downscale2egv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Downscale & Align a Raster to a Template, with optional gap fill & IDW smoothing — downscale2egv","text":"Workflow Inputs: accepts paths -memory objects (SpatRaster / sf). Fast crop: transforms grid bbox template CRS, expands buffer_m, crops raw raster early minimise work. Method auto-choice: \"near\" integer/factor rasters, otherwise \"bilinear\". Align: terra::project(raw_crop, template, method) terra::mask(..., template). Gaps: optional internal NA counts template footprint . Gap fill (optional): Whitebox wbt_fill_missing_data, window auto-sized widest gap (user filter_size_cells). Smoothing (optional): IDW via terra::interpIDW() points derived aggregated version filled raster; masked back template. Plotting: plot_gaps, plot_result (side--side ). Write: atomic write (tmp + rename), LZW, tiling, BIGTIFF=IF_SAFER, threaded; output CRS forced template WKT/EPSG crs() == crs(template) TRUE. Sink safety & memory: snapshots/restore sinks (prevents stuck console interrupted); terraOptions(memfrac/tempdir/todisk) set restored; optional gc(). IDW smoothing Aggregate points IDW back template. Controls: smooth_radius_km search radius (km; converted template units), smooth_agg_factor aggregation factor point creation, smooth_power, smooth_epsilon, smooth_nmax. Set smooth_force=TRUE allow smoothing integer/factor rasters (recommended). Mass preservation tips smoothed result generally preserve totals/means. Global: scale smoothed raster match global sum. Zonal: compute per-zone factors original coarse grid multiply.","code":""},{"path":[]},{"path":"https://aavotins.github.io/egvtools/reference/downscale2egv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downscale & Align a Raster to a Template, with optional gap fill & IDW smoothing — downscale2egv","text":"","code":"if (FALSE) { # \\dontrun{ out_dir <- tempdir() df <- downscale2egv(   template_path = \"./Templates/TemplateRasters/LV100m_10km.tif\",   grid_path     = \"./Templates/TemplateGrids/grid_10km.parquet\",   rawfile_path  = \"./MyCoarse/coarse_indicator.tif\",   out_path      = out_dir,   file_name     = \"indicator_egv.tif\",   layer_name    = \"indicator\",   fill_gaps     = TRUE,   smooth        = TRUE,   smooth_radius_km = 10,   plot_result   = TRUE ) print(df) } # }"},{"path":"https://aavotins.github.io/egvtools/reference/egvtools.html","id":null,"dir":"Reference","previous_headings":"","what":"egvtools: High-resolution Ecogeographical Variable Workflows — egvtools","title":"egvtools: High-resolution Ecogeographical Variable Workflows — egvtools","text":"egvtools provides coherent set wrappers utilities make large-scale EGV creation reproducible pleasant real datasets. package leans robust building blocks—terra, sf, sfarrow, exactextractr, whitebox—standardizes /O, naming conventions, multi-scale zonal statistics pipelines repeatable across machines projects.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/egvtools.html","id":"core-workflow-generalizable-","dir":"Reference","previous_headings":"","what":"Core workflow (generalizable)","title":"egvtools: High-resolution Ecogeographical Variable Workflows — egvtools","text":"Functions form backbone analyses (thin wrappers existing libs, opinionated stability, speed consistency): polygon2input() — rasterize polygons template, handle background/mask. downscale2egv() — downscale coarse rasters template grid optionally smooth IDW. distance2egv() — distances features optional gap filling edges. input2egv() — normalize/align inputs EGV outputs guards. landscape_function() — landscapemetrics landscape-level per-zone metrics, tiled. radius_function() — multi-scale zonal statistics (dense/sparse). tile_vector_grid() — tile template grids chunked processing. tiled_buffers() — precompute buffered tiles multiple radii. create_backgrounds() — build consistent background rasters/values.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/egvtools.html","id":"reproducibility-helpers","dir":"Reference","previous_headings":"","what":"Reproducibility helpers","title":"egvtools: High-resolution Ecogeographical Variable Workflows — egvtools","text":"Utilities set inputs structure (project HiQBioDiv) results can reproduced: download_raster_templates() — fetch template rasters (Zenodo) canonical paths. download_vector_templates() — fetch template vector grids/points.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/egvtools.html","id":"design-principles","dir":"Reference","previous_headings":"","what":"Design principles","title":"egvtools: High-resolution Ecogeographical Variable Workflows — egvtools","text":"Tiled, RAM-aware /O; workers open data path (avoid big globals) caches necessary (avoid big /O). Deterministic filenames strict layer/radius naming. Guards empty/invalid geometries, coordinate reference systems, naming -NA joins. Cross-platform parallel via {future}/{furrr} enabled.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/egvtools.html","id":"options","dir":"Reference","previous_headings":"","what":"Options","title":"egvtools: High-resolution Ecogeographical Variable Workflows — egvtools","text":"Package defaults set load (see zzz-options.R). Users may override: options(egvtools.future_plan = \"sequential\") options(egvtools.progress    = TRUE) egvtools.future_plan: default parallel plan name (e.g. \"sequential\", \"multisession\"). egvtools.progress: logical, show progress bars (TRUE/FALSE).","code":""},{"path":"https://aavotins.github.io/egvtools/reference/egvtools.html","id":"getting-started","dir":"Reference","previous_headings":"","what":"Getting started","title":"egvtools: High-resolution Ecogeographical Variable Workflows — egvtools","text":"Run download_*_templates() fetch canonical inputs. Use tile_vector_grid() / tiled_buffers() scalable chunks. Produce EGVs site scale polygon2input(), downscale2egv(), distance2egv(), input2egv(), summarise larger scales landscape_function() / radius_function().","code":""},{"path":[]},{"path":"https://aavotins.github.io/egvtools/reference/egvtools.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"egvtools: High-resolution Ecogeographical Variable Workflows — egvtools","text":"Maintainer: Andris Avotiņš andris.avotins@lu.lv","code":""},{"path":"https://aavotins.github.io/egvtools/reference/input2egv.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an input raster to an EGV-aligned raster — input2egv","title":"Convert an input raster to an EGV-aligned raster — input2egv","text":"Align fine-resolution input raster (coarser) EGV template, optionally cover missing values /fill gaps (IDW via Whitebox), write result disk. Designed large runs: fast gap counting (inside template footprint ), optional filling, tuned GDAL write options, controlled terra memory/temp behavior.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/input2egv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an input raster to an EGV-aligned raster — input2egv","text":"","code":"input2egv(   input,   egv_template,   summary_function = \"average\",   missing_job = c(\"CoverInput\", \"CoverOutput\", \"FillOutput\", \"CoverInput-CoverOutput\",     \"CoverInput-FillOutput\", \"none\"),   input_bg = NULL,   input_template = NULL,   output_bg = NULL,   idw_weight = 2,   is_categorical = FALSE,   check_alignment = TRUE,   outlocation = \"./Rastri_100m/RAW/\",   outfilename,   layername,   plot_gaps = FALSE,   plot_final = FALSE,   NAflag = NULL,   gdal_opts = c(\"COMPRESS=LZW\", \"TILED=YES\", \"BIGTIFF=IF_SAFER\", \"NUM_THREADS=ALL_CPUS\",     \"BLOCKXSIZE=256\", \"BLOCKYSIZE=256\"),   write_datatype = NULL,   terra_memfrac = 0.7,   terra_tempdir = tempdir(),   terra_todisk = TRUE,   force_gc = FALSE,   return_visible = FALSE,   quiet = FALSE )"},{"path":"https://aavotins.github.io/egvtools/reference/input2egv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an input raster to an EGV-aligned raster — input2egv","text":"input terra::SpatRaster character path (fine resolution input). egv_template terra::SpatRaster path (coarser EGV template). summary_function Character resample method. Default \"average\"; \"mean\" mapped \"average\". is_categorical = TRUE, \"near\" enforced. missing_job One \"CoverInput\", \"CoverOutput\", \"FillOutput\", \"CoverInput-CoverOutput\", \"CoverInput-FillOutput\", \"none\". Default \"none\". input_bg Background CoverInput: SpatRaster, path, numeric (+ input_template). input_template Template used input_bg numeric (builds background raster). output_bg Background CoverOutput: SpatRaster, path, numeric (+ egv_template). idw_weight Numeric power Whitebox IDW. Default 2. is_categorical Logical; TRUE, use \"near\" skip WBT fill. Default FALSE. check_alignment Logical; TRUE, cheaply checks CRS/res; warns mismatched. Default TRUE. outlocation Output directory. Default \"./Rastri_100m/RAW/\". outfilename Output filename (e.g., \"layer.tif\"). Required. layername Layer name assign writing. Required. plot_gaps Logical; plot initial gap map (guarded interactive()). Default FALSE. plot_final Logical; plot final raster (guarded interactive()). Default FALSE. NAflag Optional numeric NA flag writing. Default NULL (terra default). gdal_opts Character vector GDAL creation options (merged tuned defaults). Default c(\"COMPRESS=LZW\",\"TILED=YES\",\"BIGTIFF=IF_SAFER\",\"NUM_THREADS=ALL_CPUS\",\"BLOCKXSIZE=256\",\"BLOCKYSIZE=256\"). write_datatype Optional terra datatype (e.g., \"FLT4S\", \"INT2S\"). Default NULL. terra_memfrac Memory fraction terraOptions(memfrac=...). Default 0.7. terra_tempdir Temp dir terra/Whitebox operations. Default: tempdir(). terra_todisk Logical (set terraOptions(todisk=...) run). Default TRUE. force_gc Logical; TRUE, call gc() checkpoints. Default FALSE. return_visible Logical; TRUE, return data.frame visible; otherwise invisible. Default FALSE. quiet Logical; suppress console messages. Default FALSE.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/input2egv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an input raster to an EGV-aligned raster — input2egv","text":"single-row data.frame : path (character): written file path method (character): resample method used missing_job (character) n_gaps_initial (integer; resample/CoverInput, output-stage ops) n_gaps_final (integer; CoverOutput/FillOutput) max_gap_dist (numeric; NA computed) filter_w (integer; NA used) elapsed_sec (numeric)","code":""},{"path":"https://aavotins.github.io/egvtools/reference/input2egv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert an input raster to an EGV-aligned raster — input2egv","text":"Workflow (high level) Load input egv_template. Optionally warn CRS/resolution mismatch (check_alignment). missing_job contains CoverInput, build input_bg (numeric + input_template, raster/path) terra::cover() input. Resample/aggregate input template summary_function (\"mean\" linked \"average\"). is_categorical=TRUE method forced \"near\". Count initial gaps = .na(aligned) & !.na(template). missing_job contains CoverOutput, apply terra::cover() using output_bg. missing_job contains FillOutput !is_categorical, estimate maximum gap width (via terra::distance() fillable mask) set Whitebox filter width ceil(max_gap/pixel_size)*2. Mask template footprint, set final layer name, optionally plot initial gaps /result, write LZW/tiling (adds PREDICTOR appropriate datatype missing). Return single-row data.frame path, method, gap counts, max gap, filter size, elapsed time. Missing value workflows (missing_job): \"CoverInput\": cover input resampling (input_bg). \"CoverOutput\": cover resampled raster (output_bg). \"FillOutput\": gaps remain resampling, compute max-gap distance (via terra::distance) call whitebox::wbt_fill_missing_data() filter width approx. twice maximum gap (pixels). minimum clamp (>= 3) applied. Combinations: \"CoverInput-CoverOutput\", \"CoverInput-FillOutput\". \"none\": nothing gaps. Resampling: Default summary_function = \"average\" (area-preserving). \"mean\" mapped \"average\". is_categorical = TRUE, method forced \"near\". /O stability: Writes tiled/ threaded LZW compression. Adds PREDICTOR=2 (floats) PREDICTOR=3 (ints) provided. terraOptions(memfrac, tempdir, todisk) set call restored exit. Console messages use cat() via say() helper call sink-safe.","code":""},{"path":[]},{"path":"https://aavotins.github.io/egvtools/reference/input2egv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an input raster to an EGV-aligned raster — input2egv","text":"","code":"if (FALSE) { # \\dontrun{ input2egv(   input            = \"./TestejuPakotni_early/Forests_StandAge_bg0.tif\",   egv_template     = \"./Templates/TemplateRasters/LV100m_10km.tif\",   summary_function = \"average\",   missing_job      = \"CoverInput-FillOutput\",   input_bg         = 0,                     # numeric background + input_template   input_template   = \"./Templates/TemplateRasters/LV10m_10km.tif\",   outlocation      = \"./Rastri_100m/RAW/\",   outfilename      = \"StandAge_100m.tif\",   layername        = \"stand_age\",   force_gc         = TRUE,   quiet            = FALSE ) } # }"},{"path":"https://aavotins.github.io/egvtools/reference/landscape_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute landscape-level metrics per zone (tiled), merge, analyze gaps, optionally fill with IDW, and write rasters — landscape_function","title":"Compute landscape-level metrics per zone (tiled), merge, analyze gaps, optionally fill with IDW, and write rasters — landscape_function","text":"Computes landscapemetrics metric (default \"lsm_l_shdi\"), optionally extra lm_args, yields one value per zone per input layer. Runs tile--tile (tile_field), writes per-tile rasters, merges final per-layer GeoTIFF(s), performs gap analysis (NA count within template footprint optional maximum gap width) optional IDW gap filling via WhiteboxTools. Returns compact data.frame per-layer stats timing.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/landscape_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute landscape-level metrics per zone (tiled), merge, analyze gaps, optionally fill with IDW, and write rasters — landscape_function","text":"","code":"landscape_function(   landscape,   zones = \"./Templates/TemplateGrids/tikls500_sauzeme.parquet\",   id_field = \"rinda500\",   tile_field = \"tks50km\",   template = \"./Templates/TemplateRasters/LV500m_10km.tif\",   out_dir,   out_filename,   out_layername,   what = \"lsm_l_shdi\",   lm_args = NULL,   buffer_m = 1000,   rasterize_engine = c(\"fasterize\", \"terra\"),   n_workers = 1,   future_max_size = 4 * 1024^3,   gdal_opts = c(\"COMPRESS=LZW\", \"TILED=YES\", \"BIGTIFF=IF_SAFER\"),   write_datatype = NULL,   NAflag = NA_real_,   keep_tiles = FALSE,   skip_existing = TRUE,   terra_memfrac = 0.7,   terra_tempdir = tempdir(),   terra_todisk = TRUE,   force_gc = FALSE,   quiet = FALSE,   report_gaps = TRUE,   report_gap_size = TRUE,   fill_gaps = FALSE,   idw_weight = 2,   filter_size_cells = \"auto\",   plot_result = FALSE,   plot_gaps = FALSE )"},{"path":"https://aavotins.github.io/egvtools/reference/landscape_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute landscape-level metrics per zone (tiled), merge, analyze gaps, optionally fill with IDW, and write rasters — landscape_function","text":"landscape SpatRaster path(s) .tif (class labels). Multi-layer supported. zones sf polygons path sfarrow GeoParquet. Default \"./Templates/TemplateGrids/tikls500_sauzeme.parquet\". id_field Zone id field (default \"rinda500\"). tile_field Tiling field (default \"tks50km\"). template SpatRaster path defining target grid/CRS/cellsize. Default \"./Templates/TemplateRasters/LV500m_10km.tif\". out_dir Output directory (created missing). out_filename Character vector: final filename(s) (dir); one per input layer, matching order. out_layername Character vector: final layer name(s); one per input layer, matching order. Landscapemetrics metric (default \"lsm_l_shdi\"). lm_args Named list extra args landscapemetrics::sample_lsm() compatible . buffer_m Numeric buffer (m) tile bbox crop (default 1000). rasterize_engine \"fasterize\" (default) \"terra\". n_workers Integer; 1 = sequential. future_max_size Max globals per worker (bytes); default 4 * 1024^3 (~4 GiB). gdal_opts GDAL creation options (merged tuned defaults: c(\"COMPRESS=LZW\",\"TILED=YES\",\"BIGTIFF=IF_SAFER\",\"NUM_THREADS=ALL_CPUS\",\"BLOCKXSIZE=256\",\"BLOCKYSIZE=256\")). write_datatype terra datatype string; NULL, defaults \"FLT4S\". NAflag Numeric NA value write; NA/NULL, sensible default chosen (FLT* -9999, INT2S -32768, INT4S -2147483648). keep_tiles Logical; keep temp tiles dir (debug). Default FALSE. skip_existing Logical; skip tiles/finals already exist. Default TRUE. terra_memfrac terraOptions(memfrac=...). Default 0.7. terra_tempdir Temp dir terra ops. Default tempdir(). terra_todisk Logical NA. TRUE, prefer -disk. Default TRUE. force_gc Logical; call gc() key checkpoints. Default FALSE. quiet Suppress progress prints (cat())? Default FALSE. report_gaps Logical; print/compute gap_count. Default TRUE. report_gap_size Logical; compute/print maximum gap width (expensive). Default TRUE. fill_gaps Logical; run Whitebox IDW fill gaps exist. Default FALSE. idw_weight Numeric; IDW power Whitebox fill. Default 2. filter_size_cells Integer \"auto\"; Whitebox window size (cells). Default \"auto\". plot_result Logical; plot final per-layer raster(s). Default FALSE. plot_gaps Logical; plot gap map(s) (1 = NA inside template). Default FALSE.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/landscape_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute landscape-level metrics per zone (tiled), merge, analyze gaps, optionally fill with IDW, and write rasters — landscape_function","text":"data.frame (one row per layer) : layer_name, output_path, tiles_written, tiles_skipped_existing, tiles_skipped_empty_crop, tiles_skipped_empty_join, merge_skipped, gap_count, max_gap_distance, filter_size_cells_used, gap_filled, n_tiles, n_zones, n_layers, elapsed_sec. Attributes: \"tile_dir\" (path NULL), \"run_params\" (list).","code":""},{"path":"https://aavotins.github.io/egvtools/reference/landscape_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute landscape-level metrics per zone (tiled), merge, analyze gaps, optionally fill with IDW, and write rasters — landscape_function","text":"Workflow Inputs & CRS Accept paths -memory (SpatRaster, sf). Zones landscape aligned template CRS/grid. Tiling Split zones tile_field; process tile independently. Per-tile (layers) Quick extent crop (buffered buffer_m), landscapemetrics::sample_lsm() per layer, join back id_field, rasterize (engine: \"fasterize\" \"terra\"), mask template crop, write tile raster. Skips empty crops/joins cleanly. Merge per layer VRT tile rasters final GeoTIFF tuned GDAL options (LZW, tiling, BIGTIFF=IF_SAFER, threads). CRS forced template WKT crs(output) == crs(template) string-matches. Gap analysis & optional fill (per layer) gap_count: number NA cells inside template footprint. report_gap_size=TRUE filter_size_cells=\"auto\", compute max gap width (distance nearest non-NA). fill_gaps=TRUE gaps exist, fill whitebox::wbt_fill_missing_data() using idw_weight filter_size_cells (auto max gap width; odd, >=3). Plot result /gaps requested (side--side ). Return One row per output layer paths, tile counters, gap stats, fill parameters, elapsed seconds.","code":""},{"path":[]},{"path":"https://aavotins.github.io/egvtools/reference/landscape_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute landscape-level metrics per zone (tiled), merge, analyze gaps, optionally fill with IDW, and write rasters — landscape_function","text":"","code":"if (FALSE) { # \\dontrun{ res_tbl <- landscape_function(   landscape      = \"./Rastri_10m/Ainava_KopejaiDaudzveidibai.tif\",   zones          = \"./Templates/TemplateGrids/tikls500_sauzeme.parquet\",   id_field       = \"rinda500\",   tile_field     = \"tks50km\",   template       = \"./Templates/TemplateRasters/LV500m_10km.tif\",   out_dir        = \"./out/lsm/\",   out_filename   = \"Landscape_diversity.tif\",   out_layername  = \"Landscape_diversity\",   what           = \"lsm_l_shdi\",   rasterize_engine = \"fasterize\",   n_workers      = 8,   fill_gaps      = TRUE,   plot_gaps      = TRUE,   plot_result    = TRUE ) print(res_tbl)  #' ## --- Total edge length per zone (ignore outside map boundary) --- ## Using a binary \"water vs other\" landscape, compute lsm_l_te per 500 m zone. rez_edges <- landscape_function(   landscape        = \"./Rastri_10m/Ainava_vienk_mask.tif\",   zones            = \"./Templates/TemplateGrids/tikls500_sauzeme.parquet\",   id_field         = \"rinda500\",   tile_field       = \"tks50km\",   template         = \"./Templates/TemplateRasters/LV500m_10km.tif\",   out_dir          = \"./\",   out_filename     = \"edges_water.tif\",   out_layername    = \"edges_water\",   what             = \"lsm_l_te\",   lm_args          = list(count_boundary = FALSE),   rasterize_engine = \"terra\",   n_workers        = 8,   future_max_size  = 2 * 1024^3,   report_gaps      = TRUE,   plot_result      = TRUE,   plot_gaps        = TRUE ) rez_edges } # }"},{"path":"https://aavotins.github.io/egvtools/reference/polygon2input.html","id":null,"dir":"Reference","previous_headings":"","what":"Rasterize polygons to a template grid, optionally restrict & cover gaps, then write GeoTIFF — polygon2input","title":"Rasterize polygons to a template grid, optionally restrict & cover gaps, then write GeoTIFF — polygon2input","text":"Rasterizes polygon/multipolygon sf data raster aligned template GeoTIFF. Rasterization targets raster::RasterLayer built template (grids normally match). Projection optional (project_mode). Missing values counted valid template cells. may optionally restrict result raster mask (restrict_to) using numeric values bracketed range strings (e.g., \"(0,5]\", \"[10,)\"). Remaining NA cells can filled covering background raster (background_raster) constant (background_value). large rasters, heavy steps (projection/mask/cover) can stream disk via terra_todisk=TRUE.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/polygon2input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rasterize polygons to a template grid, optionally restrict & cover gaps, then write GeoTIFF — polygon2input","text":"","code":"polygon2input(   vector_data,   template_path,   out_path = \"./\",   file_name,   value_field = NULL,   constant_value = 1,   fun = \"max\",   value_type = c(\"categorical\", \"continuous\"),   project_mode = c(\"auto\", \"never\", \"always\"),   prepare = TRUE,   restrict_to = NULL,   restrict_values = NULL,   background_raster = NULL,   background_value = NULL,   check_na = TRUE,   plot_result = FALSE,   plot_gaps = FALSE,   NAflag = NULL,   gdal_opts = c(\"COMPRESS=LZW\", \"TILED=YES\", \"BIGTIFF=IF_SAFER\", \"NUM_THREADS=ALL_CPUS\",     \"BLOCKXSIZE=256\", \"BLOCKYSIZE=256\"),   write_datatype = NULL,   terra_memfrac = 0.7,   terra_tempdir = tempdir(),   terra_todisk = FALSE,   force_gc = FALSE,   overwrite = FALSE,   quiet = FALSE )"},{"path":"https://aavotins.github.io/egvtools/reference/polygon2input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rasterize polygons to a template grid, optionally restrict & cover gaps, then write GeoTIFF — polygon2input","text":"vector_data sf polygons/multipolygons rasterize. template_path Path template raster (.tif). out_path Output directory. Default \"./\". file_name Output filename, e.g., \"my_input.tif\". value_field Character NULL. Attribute burn; NULL, uses constant_value. constant_value Numeric scalar burned value_field=NULL. Default 1. fun Aggregation fasterize overlaps: one \"max\", \"sum\", \"first\", \"last\", \"min\", \"count\". Default \"max\". value_type Guides resampling projection happens: \"categorical\" method \"near\", \"continuous\" \"bilinear\". Default \"categorical\". project_mode \"auto\" (default; project misaligned), \"never\", \"always\". prepare Logical. TRUE, run st_make_valid() transform template CRS. Default TRUE. restrict_to Optional raster mask (path terra SpatRaster). restrict_values Optional values keep restrict_to: numbers (scalar/vector) /range strings using bracket inclusivity, e.g. \"(0,5]\",  \"[10,)\", \"(-inf,0)\". Multiple entries -ed. NULL, keep non-NA cells restrict_to. background_raster Optional path/SpatRaster used cover remaining NAs. background_value Numeric constant fill result NA background_raster. Default NULL (covering). check_na Logical. TRUE, report NA counts /. Default TRUE. plot_result Logical. Plot final raster (processing). Default FALSE. plot_gaps Logical. Plot NA gaps (within template footprint). plot flags TRUE, plots side--side. Default FALSE. NAflag Optional NA flag writing (passed GDAL). Default NULL (auto needed). gdal_opts Character vector GDAL creation options (merged tuned defaults). Default c(\"COMPRESS=LZW\",\"TILED=YES\",\"BIGTIFF=IF_SAFER\",\"NUM_THREADS=ALL_CPUS\",\"BLOCKXSIZE=256\",\"BLOCKYSIZE=256\"). write_datatype Optional terra datatype writing (e.g., \"FLT4S\", \"INT2S\"). Default NULL (auto). terra_memfrac terraOptions(memfrac=...). Default 0.7. terra_tempdir Temp dir terra operations. Default tempdir(). terra_todisk Logical NA. TRUE, prefer -disk processing heavy ops (project/mask/cover). FALSE, prefer memory. NA, leave session default unchanged. Default FALSE. force_gc Logical; call gc() checkpoints. Default FALSE. overwrite Overwrite output? Default FALSE. quiet Suppress progress prints (cat())? Default FALSE.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/polygon2input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rasterize polygons to a template grid, optionally restrict & cover gaps, then write GeoTIFF — polygon2input","text":"Invisibly, list out_file, n_cells, n_na_initial, n_na_final, elapsed_sec, crs.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/polygon2input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rasterize polygons to a template grid, optionally restrict & cover gaps, then write GeoTIFF — polygon2input","text":"Workflow (Optional) prepare=TRUE ensures valid polygons transforms template CRS (sf::st_make_valid() + sf::st_transform()). Set prepare=FALSE guarantee . Rasterize fasterize::fasterize() onto raster::RasterLayer built template. Depending project_mode, project template grid: \"auto\" (default): checks CRS/resolution/extent/rows/cols; projects needed. \"never\": skips projection. \"always\": forces projection (\"near\" value_type=\"categorical\", \"bilinear\" \"continuous\"). Apply template mask (keeps template extent NA footprint). (Optional) Restrict restrict_to (path -memory SpatRaster): restrict_values NULL, keep non-NA cells restrict_to. supplied, keep cells matching numbers (scalar/vector) /ranges using bracket syntax: \"(,b)\" open; \"[,b]\" closed; mix ends like \"(,b]\". Use -inf/+inf unbounded, e.g., \"[10,)\", \"(-inf,0)\". Multiple entries -ed. (Optional) Cover remaining NA cells: background_raster (aligned template; projected needed), constant using background_value (fast memory-light). final mask template applied plotting saving. NA counts computed terra::global() raster masks (memory-safe). Datatype & NAflag auto-chooser provide write_datatype/NAflag, function picks: value_type=\"categorical\" write_datatype=\"INT2S\", NAflag=-32768 value_type=\"continuous\" write_datatype=\"FLT4S\", NAflag omitted can always override via arguments. Performance & stability large rasters (e.g., ~1.3B cells), set terra_todisk=TRUE consider fast SSD terra_tempdir. streams big operations disk avoids \"vector memory limit\" errors. Projection often unnecessary rasterization targets template grid; \"auto\" detect alignment skip . Writes atomic: temporary file written moved place.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/polygon2input.html","id":"range-string-syntax-for-restrict-values","dir":"Reference","previous_headings":"","what":"Range string syntax for restrict_values","title":"Rasterize polygons to a template grid, optionally restrict & cover gaps, then write GeoTIFF — polygon2input","text":"Use (,b) open interval, [,b] closed; mix ends like (,b]. Use -inf/+inf (inf) unbounded, e.g. \"[10,)\", \"(-inf,0)\". Supply multiple strings , e.g. c(\"(0,5]\",\"[10,15)\").","code":""},{"path":[]},{"path":"https://aavotins.github.io/egvtools/reference/polygon2input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rasterize polygons to a template grid, optionally restrict & cover gaps, then write GeoTIFF — polygon2input","text":"","code":"if (FALSE) { # \\dontrun{ # Basic: burn constant \"1\", continuous output, no covering polygon2input( vector_data = my_polys_sf, template_path = \"./Templates/TemplateRasters/template10m.tif\", out_path = \"./Outputs\", file_name = \"mask_const1.tif\", value_field = NULL, constant_value = 1, value_type = \"continuous\", project_mode = \"auto\", prepare = FALSE, check_na = TRUE, plot_result = TRUE, overwrite = TRUE )  # Restrict to classes 1 and 2, plus (10,20], then fill remaining NAs with 0 polygon2input( vector_data = my_polys_sf, template_path = \"./Templates/TemplateRasters/template10m.tif\", out_path = \"./Outputs\", file_name = \"mask_restricted_bg0.tif\", value_field = \"attr\", value_type = \"categorical\", restrict_to = \"./mask_classes.tif\", restrict_values = c(1, 2, \"(10,20]\"), background_value = 0, terra_todisk = TRUE, # stream big ops to disk terra_tempdir = tempdir(), # or a fast SSD scratch check_na = TRUE, plot_result = TRUE, plot_gaps = TRUE, overwrite = TRUE ) } # }"},{"path":"https://aavotins.github.io/egvtools/reference/radius_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and Rasterize Summary Statistics from Buffered Radii Using exactextractr — radius_function","title":"Extract and Rasterize Summary Statistics from Buffered Radii Using exactextractr — radius_function","text":"Extracts summary statistics raster layers using buffered polygon zones multiple radii rasterizes onto common template grid. Designed parallel execution.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/radius_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and Rasterize Summary Statistics from Buffered Radii Using exactextractr — radius_function","text":"","code":"radius_function(   kvadrati_path,   radii_path,   tikls100_path,   template_path,   input_layers,   layer_prefixes,   output_dir = \"./Extracted_Layers\",   unlink_tiles = TRUE,   n_workers = 1,   radii = c(\"r500\", \"r1250\", \"r3000\", \"r10000\"),   fill_missing = TRUE,   radius_mode = \"sparse\",   IDW_weight = 2,   extract_fun = \"mean\",   future_max_size = 8 * 1024^3,   gdal_opts = c(\"COMPRESS=LZW\", \"TILED=YES\", \"BIGTIFF=IF_SAFER\", \"NUM_THREADS=ALL_CPUS\",     \"BLOCKXSIZE=256\", \"BLOCKYSIZE=256\"),   write_datatype = NULL,   NAflag = NULL,   terra_memfrac = 0.7,   terra_tempdir = tempdir(),   terra_todisk = TRUE,   quiet = FALSE )"},{"path":"https://aavotins.github.io/egvtools/reference/radius_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and Rasterize Summary Statistics from Buffered Radii Using exactextractr — radius_function","text":"kvadrati_path Path directory containing 1 ha grid-cell GeoParquet tiles (e.g., .../lapas/). radii_path Path directory buffered polygon radii tiles (r500, r1250, r3000, r10000). tikls100_path Path GeoParquet 100 m grid (must contain rinda300 ID1km). template_path Path template raster (final alignment target; e.g., LV100m_10km.tif). input_layers Named character vector covariate raster paths (values file paths, names layer prefixes used outputs). layer_prefixes Character vector names (length/order input_layers) use output layer prefixes. output_dir Output directory root. Default \"./Extracted_Layers\". unlink_tiles Logical; delete per-tile rasters merging. Default TRUE. n_workers Number parallel workers. Default 1. radii Character vector radii process (subset : \"r500\", \"r1250\", \"r3000\", \"r10000\"). fill_missing TRUE, run Whitebox IDW gap filling projected mosaic. radius_mode \"sparse\" \"dense\". Controls buffered files used: \"sparse\" uses pts100 r500/r1250, pts300 r3000, pts1000/pts1km r10000; \"dense\" uses pts100 radii. IDW_weight Numeric power Whitebox IDW. Default 2. extract_fun Function single string (e.g., \"mean\") passed exactextractr::exact_extract() returns one scalar per polygon. returns multiple values per polygon, function stops. future_max_size Max globals per worker (bytes). Default 8 * 1024^3. gdal_opts GDAL creation options writes. Default c(\"COMPRESS=LZW\",\"TILED=YES\",\"BIGTIFF=IF_SAFER\",\"NUM_THREADS=ALL_CPUS\",\"BLOCKXSIZE=256\",\"BLOCKYSIZE=256\"). write_datatype Optional terra datatype (e.g., \"FLT4S\", \"INT2S\"). Default NULL (terra default). NAflag Optional NA flag writing. Default NULL (terra default). terra_memfrac terraOptions(memfrac=...). Default 0.7. terra_tempdir Temp dir heavy ops. Default tempdir(). terra_todisk TRUE, prefer -disk operations. Default TRUE. quiet Suppress progress prints. Default FALSE.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/radius_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract and Rasterize Summary Statistics from Buffered Radii Using exactextractr — radius_function","text":"Invisibly, data.frame columns: layer, radius, output_path, n_tiles_merged, gaps_before, gaps_after, filter_size_used, gap_filled.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/radius_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract and Rasterize Summary Statistics from Buffered Radii Using exactextractr — radius_function","text":"Workflow Discover inputs (1 ha tiles buffered radii files) according radius_mode. Per tile (parallel): read tile zones available radii; crop bbox + 1 km; run exactextractr::exact_extract() per radius (cropped) raster stack, producing one value per polygon per layer; join appropriate 100 m grid (parent r3000/r10000), rasterize cropped template via fasterize, writing per-tile GeoTIFFs. layer radius: VRT-merge tiles project full template grid mask template footprint. Gap analysis & optional fill: count NA gaps inside template. fill_missing = TRUE gaps exist, estimate max gap width template (terra::distance() fillable mask), set Whitebox filter = 2 * ceil(max_gap / pixel_size) min clamp = 3, run whitebox::wbt_fill_missing_data(), mask . CRS guard & write: set terra::crs() <- terra::crs(template, proj = FALSE) write LZW tiling via atomic writes. Return: data.frame layer, radius, output_path, n_tiles_merged, gaps_before, gaps_after, filter_size_used, gap_filled. Output parsing guard Handles single vectors, data.frames (\"mean.Layer\" layer names), lists (one element per feature: numeric vectors 1-row data.frames). Clear error otherwise. Per-worker cache Large sf objects like ~6.5M-feature tikls100 loaded per worker avoid repeated /O pointer invalidation issues parallel sessions. CRS guard Outputs copy CRS string template using terra::crs(template, proj = FALSE) keep Proj.4-style string maximal compatibility.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/radius_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract and Rasterize Summary Statistics from Buffered Radii Using exactextractr — radius_function","text":"","code":"if (FALSE) { # \\dontrun{ radius_function(   kvadrati_path  = \"./Templates/TemplateGrids/lapas/\",   radii_path     = \"./Templates/TemplateGridPoints/lapas/\",   tikls100_path  = \"./Templates/TemplateGrids/tikls100_sauzeme.parquet\",   template_path  = \"./Templates/TemplateRasters/LV100m_10km.tif\",   input_layers   = c(Soils_txtSand  = \"./Rastri_100m/RAW/Soils_txtSand_cell.tif\",                      Soils_txtSilt  = \"./Rastri_100m/RAW/Soils_txtSilt_cell.tif\",                      Soils_txtClay  = \"./Rastri_100m/RAW/Soils_txtClay_cell.tif\"),   layer_prefixes = c(\"Soils_txtSand\",\"Soils_txtSilt\",\"Soils_txtClay\"),   output_dir     = \"./Extracted_Layers\",   n_workers      = 4,   radii          = c(\"r500\",\"r1250\",\"r3000\",\"r10000\"),   radius_mode    = \"sparse\",   extract_fun    = \"mean\",   fill_missing   = TRUE,   IDW_weight     = 2 ) } # }"},{"path":"https://aavotins.github.io/egvtools/reference/tile_vector_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Tile a vector grid into parquet tiles — tile_vector_grid","title":"Tile a vector grid into parquet tiles — tile_vector_grid","text":"Reads grid parquet (e.g., tikls100_sauzeme.parquet) writes per-tile parquet files out_dir. Output filenames formed : [base]_[tilename].parquet, : base = substring input filename first underscore (e.g., \"tikls100\" tikls100_sauzeme.parquet); tilename = value tile_field (e.g., 2434), auto-generated chunk id (e.g., tile_00001) tile_field NULL present. Tiling can controlled either existing tile_field (preferred) automatic chunking using chunk_size.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/tile_vector_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tile a vector grid into parquet tiles — tile_vector_grid","text":"","code":"tile_vector_grid(   grid_path = \"./Templates/TemplateGrids/tikls100_sauzeme.parquet\",   out_dir = \"./Templates/TemplateGrids/lapas\",   tile_field = \"lapa\",   chunk_size = 50000L,   overwrite = FALSE,   quiet = FALSE )"},{"path":"https://aavotins.github.io/egvtools/reference/tile_vector_grid.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Tile a vector grid into parquet tiles — tile_vector_grid","text":"Zenodo (grid example): https://zenodo.org/records/14277114","code":""},{"path":"https://aavotins.github.io/egvtools/reference/tile_vector_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tile a vector grid into parquet tiles — tile_vector_grid","text":"grid_path Character. Path source grid parquet (default \"./Templates/TemplateGrids/tikls100_sauzeme.parquet\"). out_dir Character. write tiles (default \"./Templates/TemplateGrids/lapas\"). tile_field Character NULL. provided exists data (e.g., \"lapa\"), tiles split unique values field. NULL found, uses chunk_size. Default \"lapa\". chunk_size Integer. Number rows per tile tile_field NULL missing. Default 50000L. overwrite Logical. Overwrite existing tile files? Default FALSE. quiet Logical. Suppress messages? Default FALSE.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/tile_vector_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tile a vector grid into parquet tiles — tile_vector_grid","text":"Invisibly returns data.frame columns: tile_id, n_rows, path, wrote.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/tile_vector_grid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tile a vector grid into parquet tiles — tile_vector_grid","text":"Uses sfarrow Parquet /O. CRS geometry preserved. Designed stable, idempotent outputs, deterministic filenames, clean skipping existing tiles.","code":""},{"path":[]},{"path":"https://aavotins.github.io/egvtools/reference/tile_vector_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tile a vector grid into parquet tiles — tile_vector_grid","text":"","code":"if (FALSE) { # \\dontrun{ # Split by an existing field (e.g., \"lapa\") tile_vector_grid(   grid_path = \"./Templates/TemplateGrids/tikls100_sauzeme.parquet\",   out_dir   = \"./Templates/TemplateGrids/lapas\",   tile_field = \"lapa\" )  # Fallback to chunking if tile_field is NULL or missing tile_vector_grid(   grid_path  = \"./Templates/TemplateGrids/tikls100_sauzeme.parquet\",   out_dir    = \"./Templates/TemplateGrids/lapas\",   tile_field = NULL,   chunk_size = 25000 ) } # }"},{"path":"https://aavotins.github.io/egvtools/reference/tiled_buffers.html","id":null,"dir":"Reference","previous_headings":"","what":"Create buffered tiles from point layers — tiled_buffers","title":"Create buffered tiles from point layers — tiled_buffers","text":"Buffers point parquet files writes per-tile outputs named: Fixed radius: <base>_r<radius>_<tileid>.parquet Per-feature radii (radius_field): <base>_varradius_<tileid>.parquet : base = prefix input filename first underscore (e.g., \"pts100\" pts100_sauzeme.parquet) tileid = unique value split_field (default \"tks50km\") inside input file buffer_mode determines radii assigned: \"dense\": Buffers best-matching pts100*.parquet (prefers pts100_sauzeme.parquet) tile radii_dense (default: 500, 1250, 3000, 10000 m). \"sparse\": Uses file radius mapping. Default mapping: \"pts100_sauzeme.parquet\" c(500, 1250) \"pts300_sauzeme.parquet\" 3000 \"pts1000_sauzeme.parquet\" 10000 can override via mapping_sparse (named list data.frame columns file, radius). \"specified\": provide points_path either buffer_radius (uniform, one fixed radii) radius_field (numeric column per-feature radii meters). Outputs still split split_field.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/tiled_buffers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create buffered tiles from point layers — tiled_buffers","text":"","code":"tiled_buffers(   in_dir = \"./Templates/TemplateGridPoints\",   out_dir = \"./Templates/TemplateGridPoints/lapas\",   buffer_mode = \"dense\",   radii_dense = c(500, 1250, 3000, 10000),   mapping_sparse = list(pts100_sauzeme.parquet = c(500, 1250), pts300_sauzeme.parquet =     3000, pts1000_sauzeme.parquet = 10000),   points_path = NULL,   buffer_radius = NULL,   radius_field = NULL,   split_field = \"tks50km\",   n_workers = max(1L, parallel::detectCores()),   future_max_mem_gb = 4,   overwrite = FALSE,   quiet = FALSE )"},{"path":"https://aavotins.github.io/egvtools/reference/tiled_buffers.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Create buffered tiles from point layers — tiled_buffers","text":"Zenodo grids/points example: https://zenodo.org/records/14277114","code":""},{"path":"https://aavotins.github.io/egvtools/reference/tiled_buffers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create buffered tiles from point layers — tiled_buffers","text":"in_dir Character. Directory containing input points parquet files (default \"./Templates/TemplateGridPoints\"). Used \"dense\" \"sparse\" modes. out_dir Character. Output directory buffered tiles (default \"./Templates/TemplateGridPoints/lapas\"). buffer_mode Character. One \"dense\", \"sparse\", \"specified\". Default \"dense\". radii_dense Numeric vector radii (m) used buffer_mode = \"dense\". Default c(500, 1250, 3000, 10000). mapping_sparse Named list data.frame describing file radii buffer_mode = \"sparse\". Default: list(\"pts100_sauzeme.parquet\" = c(500, 1250), \"pts300_sauzeme.parquet\" = 3000, \"pts1000_sauzeme.parquet\" = 10000). data.frame supplied, must columns file radius. points_path Character. Path single parquet file buffer_mode = \"specified\". buffer_radius Numeric vector. Used \"specified\" want fixed radii. Ignored radius_field provided. radius_field Character NULL. Column name points_path provides per-feature radii (meters) \"specified\". given, buffer_radius ignored. split_field Character. Field point data defines tiles. Default \"tks50km\". n_workers Integer. Parallel workers. Default max(1L, parallel::detectCores()). future_max_mem_gb Numeric. Max size exported globals per worker (GiB). Sets options(future.globals.maxSize = future_max_mem_gb * 1024^3). Default 4. overwrite Logical. Overwrite existing outputs? Default FALSE. quiet Logical. Suppress messages? Default FALSE.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/tiled_buffers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create buffered tiles from point layers — tiled_buffers","text":"Invisibly returns data.frame columns: input, tileid, mode, radius_m (NA radius_field used), radius_field, out_file, wrote.","code":""},{"path":"https://aavotins.github.io/egvtools/reference/tiled_buffers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create buffered tiles from point layers — tiled_buffers","text":"Uses sfarrow parquet /O sf buffering. Jobs created per tile (unique split_field value) (applicable) per radius. Workers open data file paths (keeps RAM low). Files written atomically (temp file move). Safety: jobs de-duplicated content predicted output path, concurrent workers never write file.","code":""},{"path":[]},{"path":"https://aavotins.github.io/egvtools/reference/tiled_buffers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create buffered tiles from point layers — tiled_buffers","text":"","code":"if (FALSE) { # \\dontrun{ tiled_buffers(buffer_mode = \"sparse\", split_field = \"tks50km\") } # }"},{"path":"https://aavotins.github.io/egvtools/news/index.html","id":"egvtools-0009000","dir":"Changelog","previous_headings":"","what":"egvtools 0.0.0.9000","title":"egvtools 0.0.0.9000","text":"Initial development version.","code":""}]
